{"version":3,"file":"tonal.min.js","sources":["../../core/dist/index.es.js","../../abc-notation/dist/index.es.js","../../array/dist/index.es.js","../../collection/dist/index.es.js","../../pcset/dist/index.es.js","../../chord-type/dist/index.es.js","../../scale-type/dist/index.es.js","../../chord/dist/index.es.js","../../chord-detect/dist/index.es.js","../../duration-value/dist/index.es.js","../../interval/dist/index.es.js","../../midi/dist/index.es.js","../../note/dist/index.es.js","../../roman-numeral/dist/index.es.js","../../key/dist/index.es.js","../../mode/dist/index.es.js","../../progression/dist/index.es.js","../../range/dist/index.es.js","../../scale/dist/index.es.js","../../time-signature/dist/index.es.js","../dist/index.js"],"sourcesContent":["/**\r\n * Fill a string with a repeated character\r\n *\r\n * @param character\r\n * @param repetition\r\n */\r\nconst fillStr = (s, n) => Array(Math.abs(n) + 1).join(s);\r\nfunction deprecate(original, alternative, fn) {\r\n    return function (...args) {\r\n        // tslint:disable-next-line\r\n        console.warn(`${original} is deprecated. Use ${alternative}.`);\r\n        return fn.apply(this, args);\r\n    };\r\n}\n\nfunction isNamed(src) {\r\n    return src !== null && typeof src === \"object\" && typeof src.name === \"string\"\r\n        ? true\r\n        : false;\r\n}\n\nfunction isPitch(pitch) {\r\n    return pitch !== null &&\r\n        typeof pitch === \"object\" &&\r\n        typeof pitch.step === \"number\" &&\r\n        typeof pitch.alt === \"number\"\r\n        ? true\r\n        : false;\r\n}\r\n// The number of fifths of [C, D, E, F, G, A, B]\r\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\r\n// The number of octaves it span each step\r\nconst STEPS_TO_OCTS = FIFTHS.map((fifths) => Math.floor((fifths * 7) / 12));\r\nfunction encode(pitch) {\r\n    const { step, alt, oct, dir = 1 } = pitch;\r\n    const f = FIFTHS[step] + 7 * alt;\r\n    if (oct === undefined) {\r\n        return [dir * f];\r\n    }\r\n    const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\r\n    return [dir * f, dir * o];\r\n}\r\n// We need to get the steps from fifths\r\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\r\n// We add 1 to fifths to avoid negative numbers, so:\r\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\r\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\r\nfunction decode(coord) {\r\n    const [f, o, dir] = coord;\r\n    const step = FIFTHS_TO_STEPS[unaltered(f)];\r\n    const alt = Math.floor((f + 1) / 7);\r\n    if (o === undefined) {\r\n        return { step, alt, dir };\r\n    }\r\n    const oct = o + 4 * alt + STEPS_TO_OCTS[step];\r\n    return { step, alt, oct, dir };\r\n}\r\n// Return the number of fifths as if it were unaltered\r\nfunction unaltered(f) {\r\n    const i = (f + 1) % 7;\r\n    return i < 0 ? 7 + i : i;\r\n}\n\nconst NoNote = { empty: true, name: \"\", pc: \"\", acc: \"\" };\r\nconst cache$1 = new Map();\r\nconst stepToLetter = (step) => \"CDEFGAB\".charAt(step);\r\nconst altToAcc = (alt) => alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\r\nconst accToAlt = (acc) => acc[0] === \"b\" ? -acc.length : acc.length;\r\n/**\r\n * Given a note literal (a note name or a note object), returns the Note object\r\n * @example\r\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nfunction note(src) {\r\n    const cached = cache$1.get(src);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const value = typeof src === \"string\"\r\n        ? parse$1(src)\r\n        : isPitch(src)\r\n            ? note(pitchName$1(src))\r\n            : isNamed(src)\r\n                ? note(src.name)\r\n                : NoNote;\r\n    cache$1.set(src, value);\r\n    return value;\r\n}\r\nconst REGEX$1 = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeNote(str) {\r\n    const m = REGEX$1.exec(str);\r\n    return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction coordToNote(noteCoord) {\r\n    return note(decode(noteCoord));\r\n}\r\nconst mod = (n, m) => ((n % m) + m) % m;\r\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\r\nfunction parse$1(noteName) {\r\n    const tokens = tokenizeNote(noteName);\r\n    if (tokens[0] === \"\" || tokens[3] !== \"\") {\r\n        return NoNote;\r\n    }\r\n    const letter = tokens[0];\r\n    const acc = tokens[1];\r\n    const octStr = tokens[2];\r\n    const step = (letter.charCodeAt(0) + 3) % 7;\r\n    const alt = accToAlt(acc);\r\n    const oct = octStr.length ? +octStr : undefined;\r\n    const coord = encode({ step, alt, oct });\r\n    const name = letter + acc + octStr;\r\n    const pc = letter + acc;\r\n    const chroma = (SEMI[step] + alt + 120) % 12;\r\n    const height = oct === undefined\r\n        ? mod(SEMI[step] + alt, 12) - 12 * 99\r\n        : SEMI[step] + alt + 12 * (oct + 1);\r\n    const midi = height >= 0 && height <= 127 ? height : null;\r\n    const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\r\n    return {\r\n        empty: false,\r\n        acc,\r\n        alt,\r\n        chroma,\r\n        coord,\r\n        freq,\r\n        height,\r\n        letter,\r\n        midi,\r\n        name,\r\n        oct,\r\n        pc,\r\n        step,\r\n    };\r\n}\r\nfunction pitchName$1(props) {\r\n    const { step, alt, oct } = props;\r\n    const letter = stepToLetter(step);\r\n    if (!letter) {\r\n        return \"\";\r\n    }\r\n    const pc = letter + altToAcc(alt);\r\n    return oct || oct === 0 ? pc + oct : pc;\r\n}\n\nconst NoInterval = { empty: true, name: \"\", acc: \"\" };\r\n// shorthand tonal notation (with quality after number)\r\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\r\n// standard shorthand notation (with quality before number)\r\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\r\nconst REGEX = new RegExp(\"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\");\r\n/**\r\n * @private\r\n */\r\nfunction tokenizeInterval(str) {\r\n    const m = REGEX.exec(`${str}`);\r\n    if (m === null) {\r\n        return [\"\", \"\"];\r\n    }\r\n    return m[1] ? [m[1], m[2]] : [m[4], m[3]];\r\n}\r\nconst cache = {};\r\n/**\r\n * Get interval properties. It returns an object with:\r\n *\r\n * - name: the interval name\r\n * - num: the interval number\r\n * - type: 'perfectable' or 'majorable'\r\n * - q: the interval quality (d, m, M, A)\r\n * - dir: interval direction (1 ascending, -1 descending)\r\n * - simple: the simplified number\r\n * - semitones: the size in semitones\r\n * - chroma: the interval chroma\r\n *\r\n * @param {string} interval - the interval name\r\n * @return {Object} the interval properties\r\n *\r\n * @example\r\n * import { interval } from '@tonaljs/core'\r\n * interval('P5').semitones // => 7\r\n * interval('m3').type // => 'majorable'\r\n */\r\nfunction interval(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : isPitch(src)\r\n            ? interval(pitchName(src))\r\n            : isNamed(src)\r\n                ? interval(src.name)\r\n                : NoInterval;\r\n}\r\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\r\nconst TYPES = \"PMMPPMM\";\r\nfunction parse(str) {\r\n    const tokens = tokenizeInterval(str);\r\n    if (tokens[0] === \"\") {\r\n        return NoInterval;\r\n    }\r\n    const num = +tokens[0];\r\n    const q = tokens[1];\r\n    const step = (Math.abs(num) - 1) % 7;\r\n    const t = TYPES[step];\r\n    if (t === \"M\" && q === \"P\") {\r\n        return NoInterval;\r\n    }\r\n    const type = t === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = \"\" + num + q;\r\n    const dir = num < 0 ? -1 : 1;\r\n    const simple = num === 8 || num === -8 ? num : dir * (step + 1);\r\n    const alt = qToAlt(type, q);\r\n    const oct = Math.floor((Math.abs(num) - 1) / 7);\r\n    const semitones = dir * (SIZES[step] + alt + 12 * oct);\r\n    const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\r\n    const coord = encode({ step, alt, oct, dir });\r\n    return {\r\n        empty: false,\r\n        name,\r\n        num,\r\n        q,\r\n        step,\r\n        alt,\r\n        dir,\r\n        type,\r\n        simple,\r\n        semitones,\r\n        chroma,\r\n        coord,\r\n        oct,\r\n    };\r\n}\r\n/**\r\n * @private\r\n *\r\n * forceDescending is used in the case of unison (#243)\r\n */\r\nfunction coordToInterval(coord, forceDescending) {\r\n    const [f, o = 0] = coord;\r\n    const isDescending = f * 7 + o * 12 < 0;\r\n    const ivl = forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\r\n    return interval(decode(ivl));\r\n}\r\nfunction qToAlt(type, q) {\r\n    return (q === \"M\" && type === \"majorable\") ||\r\n        (q === \"P\" && type === \"perfectable\")\r\n        ? 0\r\n        : q === \"m\" && type === \"majorable\"\r\n            ? -1\r\n            : /^A+$/.test(q)\r\n                ? q.length\r\n                : /^d+$/.test(q)\r\n                    ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\r\n                    : 0;\r\n}\r\n// return the interval name of a pitch\r\nfunction pitchName(props) {\r\n    const { step, alt, oct = 0, dir } = props;\r\n    if (!dir) {\r\n        return \"\";\r\n    }\r\n    const calcNum = step + 1 + 7 * oct;\r\n    // this is an edge case: descending pitch class unison (see #243)\r\n    const num = calcNum === 0 ? step + 1 : calcNum;\r\n    const d = dir < 0 ? \"-\" : \"\";\r\n    const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\r\n    const name = d + num + altToQ(type, alt);\r\n    return name;\r\n}\r\nfunction altToQ(type, alt) {\r\n    if (alt === 0) {\r\n        return type === \"majorable\" ? \"M\" : \"P\";\r\n    }\r\n    else if (alt === -1 && type === \"majorable\") {\r\n        return \"m\";\r\n    }\r\n    else if (alt > 0) {\r\n        return fillStr(\"A\", alt);\r\n    }\r\n    else {\r\n        return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1);\r\n    }\r\n}\n\n/**\r\n * Transpose a note by an interval.\r\n *\r\n * @param {string} note - the note or note name\r\n * @param {string} interval - the interval or interval name\r\n * @return {string} the transposed note name or empty string if not valid notes\r\n * @example\r\n * import { tranpose } from \"@tonaljs/core\"\r\n * transpose(\"d3\", \"3M\") // => \"F#3\"\r\n * transpose(\"D\", \"3M\") // => \"F#\"\r\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\r\n */\r\nfunction transpose(noteName, intervalName) {\r\n    const note$1 = note(noteName);\r\n    const interval$1 = interval(intervalName);\r\n    if (note$1.empty || interval$1.empty) {\r\n        return \"\";\r\n    }\r\n    const noteCoord = note$1.coord;\r\n    const intervalCoord = interval$1.coord;\r\n    const tr = noteCoord.length === 1\r\n        ? [noteCoord[0] + intervalCoord[0]]\r\n        : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\r\n    return coordToNote(tr).name;\r\n}\r\n/**\r\n * Find the interval distance between two notes or coord classes.\r\n *\r\n * To find distance between coord classes, both notes must be coord classes and\r\n * the interval is always ascending\r\n *\r\n * @param {Note|string} from - the note or note name to calculate distance from\r\n * @param {Note|string} to - the note or note name to calculate distance to\r\n * @return {string} the interval name or empty string if not valid notes\r\n *\r\n */\r\nfunction distance(fromNote, toNote) {\r\n    const from = note(fromNote);\r\n    const to = note(toNote);\r\n    if (from.empty || to.empty) {\r\n        return \"\";\r\n    }\r\n    const fcoord = from.coord;\r\n    const tcoord = to.coord;\r\n    const fifths = tcoord[0] - fcoord[0];\r\n    const octs = fcoord.length === 2 && tcoord.length === 2\r\n        ? tcoord[1] - fcoord[1]\r\n        : -Math.floor((fifths * 7) / 12);\r\n    // If it's unison and not pitch class, it can be descending interval (#243)\r\n    const forceDescending = to.height === from.height &&\r\n        to.midi !== null &&\r\n        from.midi !== null &&\r\n        from.step > to.step;\r\n    return coordToInterval([fifths, octs], forceDescending).name;\r\n}\n\nexport { accToAlt, altToAcc, coordToInterval, coordToNote, decode, deprecate, distance, encode, fillStr, interval, isNamed, isPitch, note, stepToLetter, tokenizeInterval, tokenizeNote, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, distance as distance$1 } from '@tonaljs/core';\n\nconst fillStr = (character, times) => Array(times + 1).join(character);\r\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\r\nfunction tokenize(str) {\r\n    const m = REGEX.exec(str);\r\n    if (!m) {\r\n        return [\"\", \"\", \"\"];\r\n    }\r\n    return [m[1], m[2], m[3]];\r\n}\r\n/**\r\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\r\n *\r\n * @example\r\n * abcToScientificNotation(\"c\") // => \"C5\"\r\n */\r\nfunction abcToScientificNotation(str) {\r\n    const [acc, letter, oct] = tokenize(str);\r\n    if (letter === \"\") {\r\n        return \"\";\r\n    }\r\n    let o = 4;\r\n    for (let i = 0; i < oct.length; i++) {\r\n        o += oct.charAt(i) === \",\" ? -1 : 1;\r\n    }\r\n    const a = acc[0] === \"_\"\r\n        ? acc.replace(/_/g, \"b\")\r\n        : acc[0] === \"^\"\r\n            ? acc.replace(/\\^/g, \"#\")\r\n            : \"\";\r\n    return letter.charCodeAt(0) > 96\r\n        ? letter.toUpperCase() + a + (o + 1)\r\n        : letter + a + o;\r\n}\r\n/**\r\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\r\n *\r\n * @example\r\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\r\n */\r\nfunction scientificToAbcNotation(str) {\r\n    const n = note(str);\r\n    if (n.empty || (!n.oct && n.oct !== 0)) {\r\n        return \"\";\r\n    }\r\n    const { letter, acc, oct } = n;\r\n    const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\r\n    const l = oct > 4 ? letter.toLowerCase() : letter;\r\n    const o = oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\r\n    return a + l + o;\r\n}\r\nfunction transpose(note, interval) {\r\n    return scientificToAbcNotation(transpose$1(abcToScientificNotation(note), interval));\r\n}\r\nfunction distance(from, to) {\r\n    return distance$1(abcToScientificNotation(from), abcToScientificNotation(to));\r\n}\r\nvar index = {\r\n    abcToScientificNotation,\r\n    scientificToAbcNotation,\r\n    tokenize,\r\n    transpose,\r\n    distance,\r\n};\n\nexport { abcToScientificNotation, index as default, distance, scientificToAbcNotation, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\n// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} array\r\n * @return {Array} the rotated array\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the array with the null values removed\r\n * @function\r\n * @param {Array} array\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Sort an array of notes in ascending order. Pitch classes are listed\r\n * before notes. Any string that is not a note is removed.\r\n *\r\n * @param {string[]} notes\r\n * @return {string[]} sorted array of notes\r\n *\r\n * @example\r\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\r\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\r\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\r\n * // => ['C', 'F', 'G', 'A', 'B']\r\n */\r\nfunction sortedNoteNames(notes) {\r\n    const valid = notes.map((n) => note(n)).filter((n) => !n.empty);\r\n    return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\r\n}\r\n/**\r\n * Get sorted notes with duplicates removed. Pitch classes are listed\r\n * before notes.\r\n *\r\n * @function\r\n * @param {string[]} array\r\n * @return {string[]} unique sorted notes\r\n *\r\n * @example\r\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\r\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\r\n */\r\nfunction sortedUniqNoteNames(arr) {\r\n    return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} array\r\n * @return {Array} the array shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an array\r\n *\r\n * @param {Array} array - the array\r\n * @return {Array<Array>} an array with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\n\nexport { compact, permutations, range, rotate, shuffle, sortedNoteNames, sortedUniqNoteNames };\n//# sourceMappingURL=index.es.js.map\n","// ascending range\r\nfunction ascR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = n + b)\r\n        ;\r\n    return a;\r\n}\r\n// descending range\r\nfunction descR(b, n) {\r\n    const a = [];\r\n    // tslint:disable-next-line:curly\r\n    for (; n--; a[n] = b - n)\r\n        ;\r\n    return a;\r\n}\r\n/**\r\n * Creates a numeric range\r\n *\r\n * @param {number} from\r\n * @param {number} to\r\n * @return {Array<number>}\r\n *\r\n * @example\r\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\r\n * range(2, -2) // => [2, 1, 0, -1, -2]\r\n */\r\nfunction range(from, to) {\r\n    return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\r\n}\r\n/**\r\n * Rotates a list a number of times. It\"s completly agnostic about the\r\n * contents of the list.\r\n *\r\n * @param {Integer} times - the number of rotations\r\n * @param {Array} collection\r\n * @return {Array} the rotated collection\r\n *\r\n * @example\r\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\r\n */\r\nfunction rotate(times, arr) {\r\n    const len = arr.length;\r\n    const n = ((times % len) + len) % len;\r\n    return arr.slice(n, len).concat(arr.slice(0, n));\r\n}\r\n/**\r\n * Return a copy of the collection with the null values removed\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array}\r\n *\r\n * @example\r\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\r\n */\r\nfunction compact(arr) {\r\n    return arr.filter((n) => n === 0 || n);\r\n}\r\n/**\r\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\r\n *\r\n * @function\r\n * @param {Array} collection\r\n * @return {Array} the collection shuffled\r\n *\r\n * @example\r\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\r\n */\r\nfunction shuffle(arr, rnd = Math.random) {\r\n    let i;\r\n    let t;\r\n    let m = arr.length;\r\n    while (m) {\r\n        i = Math.floor(rnd() * m--);\r\n        t = arr[m];\r\n        arr[m] = arr[i];\r\n        arr[i] = t;\r\n    }\r\n    return arr;\r\n}\r\n/**\r\n * Get all permutations of an collection\r\n *\r\n * @param {Array} collection - the collection\r\n * @return {Array<Array>} an collection with all the permutations\r\n * @example\r\n * permutations([\"a\", \"b\", \"c\"])) // =>\r\n * [\r\n *   [\"a\", \"b\", \"c\"],\r\n *   [\"b\", \"a\", \"c\"],\r\n *   [\"b\", \"c\", \"a\"],\r\n *   [\"a\", \"c\", \"b\"],\r\n *   [\"c\", \"a\", \"b\"],\r\n *   [\"c\", \"b\", \"a\"]\r\n * ]\r\n */\r\nfunction permutations(arr) {\r\n    if (arr.length === 0) {\r\n        return [[]];\r\n    }\r\n    return permutations(arr.slice(1)).reduce((acc, perm) => {\r\n        return acc.concat(arr.map((e, pos) => {\r\n            const newPerm = perm.slice();\r\n            newPerm.splice(pos, 0, arr[0]);\r\n            return newPerm;\r\n        }));\r\n    }, []);\r\n}\r\nvar index = {\r\n    compact,\r\n    permutations,\r\n    range,\r\n    rotate,\r\n    shuffle,\r\n};\n\nexport { compact, index as default, permutations, range, rotate, shuffle };\n//# sourceMappingURL=index.es.js.map\n","import { range, compact, rotate } from '@tonaljs/collection';\nimport { deprecate, note, interval } from '@tonaljs/core';\n\nconst EmptyPcset = {\r\n    empty: true,\r\n    name: \"\",\r\n    setNum: 0,\r\n    chroma: \"000000000000\",\r\n    normalized: \"000000000000\",\r\n    intervals: [],\r\n};\r\n// UTILITIES\r\nconst setNumToChroma = (num) => Number(num).toString(2);\r\nconst chromaToNumber = (chroma) => parseInt(chroma, 2);\r\nconst REGEX = /^[01]{12}$/;\r\nfunction isChroma(set) {\r\n    return REGEX.test(set);\r\n}\r\nconst isPcsetNum = (set) => typeof set === \"number\" && set >= 0 && set <= 4095;\r\nconst isPcset = (set) => set && isChroma(set.chroma);\r\nconst cache = { [EmptyPcset.chroma]: EmptyPcset };\r\n/**\r\n * Get the pitch class set of a collection of notes or set number or chroma\r\n */\r\nfunction get(src) {\r\n    const chroma = isChroma(src)\r\n        ? src\r\n        : isPcsetNum(src)\r\n            ? setNumToChroma(src)\r\n            : Array.isArray(src)\r\n                ? listToChroma(src)\r\n                : isPcset(src)\r\n                    ? src.chroma\r\n                    : EmptyPcset.chroma;\r\n    return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\r\n}\r\n/**\r\n * Use Pcset.properties\r\n * @function\r\n * @deprecated\r\n */\r\nconst pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\r\n/**\r\n * Get pitch class set chroma\r\n * @function\r\n * @example\r\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\r\n */\r\nconst chroma = (set) => get(set).chroma;\r\n/**\r\n * Get intervals (from C) of a set\r\n * @function\r\n * @example\r\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\r\n */\r\nconst intervals = (set) => get(set).intervals;\r\n/**\r\n * Get pitch class set number\r\n * @function\r\n * @example\r\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\r\n */\r\nconst num = (set) => get(set).setNum;\r\nconst IVLS = [\r\n    \"1P\",\r\n    \"2m\",\r\n    \"2M\",\r\n    \"3m\",\r\n    \"3M\",\r\n    \"4P\",\r\n    \"5d\",\r\n    \"5P\",\r\n    \"6m\",\r\n    \"6M\",\r\n    \"7m\",\r\n    \"7M\",\r\n];\r\n/**\r\n * @private\r\n * Get the intervals of a pcset *starting from C*\r\n * @param {Set} set - the pitch class set\r\n * @return {IntervalName[]} an array of interval names or an empty array\r\n * if not a valid pitch class set\r\n */\r\nfunction chromaToIntervals(chroma) {\r\n    const intervals = [];\r\n    for (let i = 0; i < 12; i++) {\r\n        // tslint:disable-next-line:curly\r\n        if (chroma.charAt(i) === \"1\")\r\n            intervals.push(IVLS[i]);\r\n    }\r\n    return intervals;\r\n}\r\n/**\r\n * Get a list of all possible pitch class sets (all possible chromas) *having\r\n * C as root*. There are 2048 different chromas. If you want them with another\r\n * note you have to transpose it\r\n *\r\n * @see http://allthescales.org/\r\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\r\n */\r\nfunction chromas() {\r\n    return range(2048, 4095).map(setNumToChroma);\r\n}\r\n/**\r\n * Given a a list of notes or a pcset chroma, produce the rotations\r\n * of the chroma discarding the ones that starts with \"0\"\r\n *\r\n * This is used, for example, to get all the modes of a scale.\r\n *\r\n * @param {Array|string} set - the list of notes or pitchChr of the set\r\n * @param {boolean} normalize - (Optional, true by default) remove all\r\n * the rotations that starts with \"0\"\r\n * @return {Array<string>} an array with all the modes of the chroma\r\n *\r\n * @example\r\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\r\n */\r\nfunction modes(set, normalize = true) {\r\n    const pcs = get(set);\r\n    const binary = pcs.chroma.split(\"\");\r\n    return compact(binary.map((_, i) => {\r\n        const r = rotate(i, binary);\r\n        return normalize && r[0] === \"0\" ? null : r.join(\"\");\r\n    }));\r\n}\r\n/**\r\n * Test if two pitch class sets are numentical\r\n *\r\n * @param {Array|string} set1 - one of the pitch class sets\r\n * @param {Array|string} set2 - the other pitch class set\r\n * @return {boolean} true if they are equal\r\n * @example\r\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\r\n */\r\nfunction isEqual(s1, s2) {\r\n    return get(s1).setNum === get(s2).setNum;\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * subset of a given set\r\n *\r\n * The function is curryfied.\r\n *\r\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\r\n * list of notes)\r\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\r\n * to test against (chroma or list of notes)\r\n * @example\r\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\r\n * inCMajor([\"e6\", \"c4\"]) // => true\r\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\r\n */\r\nfunction isSubsetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o & s) === o;\r\n    };\r\n}\r\n/**\r\n * Create a function that test if a collection of notes is a\r\n * superset of a given set (it contains all notes and at least one more)\r\n *\r\n * @param {Set} set - an array of notes or a chroma set string to test against\r\n * @return {(subset: Set): boolean} a function that given a set\r\n * returns true if is a subset of the first one\r\n * @example\r\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\r\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\r\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\r\n */\r\nfunction isSupersetOf(set) {\r\n    const s = get(set).setNum;\r\n    return (notes) => {\r\n        const o = get(notes).setNum;\r\n        // tslint:disable-next-line: no-bitwise\r\n        return s && s !== o && (o | s) === o;\r\n    };\r\n}\r\n/**\r\n * Test if a given pitch class set includes a note\r\n *\r\n * @param {Array<string>} set - the base set to test against\r\n * @param {string} note - the note to test\r\n * @return {boolean} true if the note is included in the pcset\r\n *\r\n * Can be partially applied\r\n *\r\n * @example\r\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\r\n * isNoteInCMajor('C4') // => true\r\n * isNoteInCMajor('C#4') // => false\r\n */\r\nfunction isNoteIncludedIn(set) {\r\n    const s = get(set);\r\n    return (noteName) => {\r\n        const n = note(noteName);\r\n        return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\r\n    };\r\n}\r\n/** @deprecated use: isNoteIncludedIn */\r\nconst includes = isNoteIncludedIn;\r\n/**\r\n * Filter a list with a pitch class set\r\n *\r\n * @param {Array|string} set - the pitch class set notes\r\n * @param {Array|string} notes - the note list to be filtered\r\n * @return {Array} the filtered notes\r\n *\r\n * @example\r\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\r\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\r\n */\r\nfunction filter(set) {\r\n    const isIncluded = isNoteIncludedIn(set);\r\n    return (notes) => {\r\n        return notes.filter(isIncluded);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    chroma,\r\n    num,\r\n    intervals,\r\n    chromas,\r\n    isSupersetOf,\r\n    isSubsetOf,\r\n    isNoteIncludedIn,\r\n    isEqual,\r\n    filter,\r\n    modes,\r\n    // deprecated\r\n    pcset,\r\n};\r\n//// PRIVATE ////\r\nfunction chromaRotations(chroma) {\r\n    const binary = chroma.split(\"\");\r\n    return binary.map((_, i) => rotate(i, binary).join(\"\"));\r\n}\r\nfunction chromaToPcset(chroma) {\r\n    const setNum = chromaToNumber(chroma);\r\n    const normalizedNum = chromaRotations(chroma)\r\n        .map(chromaToNumber)\r\n        .filter((n) => n >= 2048)\r\n        .sort()[0];\r\n    const normalized = setNumToChroma(normalizedNum);\r\n    const intervals = chromaToIntervals(chroma);\r\n    return {\r\n        empty: false,\r\n        name: \"\",\r\n        setNum,\r\n        chroma,\r\n        normalized,\r\n        intervals,\r\n    };\r\n}\r\nfunction listToChroma(set) {\r\n    if (set.length === 0) {\r\n        return EmptyPcset.chroma;\r\n    }\r\n    let pitch;\r\n    const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < set.length; i++) {\r\n        pitch = note(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (pitch.empty)\r\n            pitch = interval(set[i]);\r\n        // tslint:disable-next-line: curly\r\n        if (!pitch.empty)\r\n            binary[pitch.chroma] = 1;\r\n    }\r\n    return binary.join(\"\");\r\n}\n\nexport { EmptyPcset, chromaToIntervals, chromas, index as default, filter, get, includes, isEqual, isNoteIncludedIn, isSubsetOf, isSupersetOf, modes, pcset };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n/**\r\n * @private\r\n * Chord List\r\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\r\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\r\n */\r\nconst CHORDS = [\r\n    // ==Major==\r\n    [\"1P 3M 5P\", \"major\", \"M ^ \"],\r\n    [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\r\n    [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\r\n    [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\r\n    [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\r\n    [\"1P 3M 5P 6M 9M\", \"sixth/ninth\", \"6/9 69 M69\"],\r\n    [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\r\n    [\r\n        \"1P 3M 5P 7M 11A\",\r\n        \"major seventh sharp eleventh\",\r\n        \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\r\n    ],\r\n    // ==Minor==\r\n    // '''Normal'''\r\n    [\"1P 3m 5P\", \"minor\", \"m min -\"],\r\n    [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\r\n    [\r\n        \"1P 3m 5P 7M\",\r\n        \"minor/major seventh\",\r\n        \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7\",\r\n    ],\r\n    [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\r\n    [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\r\n    [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\r\n    [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\r\n    [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\r\n    // '''Diminished'''\r\n    [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\r\n    [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\r\n    [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\r\n    // ==Dominant/Seventh==\r\n    // '''Normal'''\r\n    [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\r\n    [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\r\n    [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\r\n    [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\r\n    // '''Altered'''\r\n    [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\r\n    [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\r\n    [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\r\n    // '''Suspended'''\r\n    [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\r\n    [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\r\n    [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\r\n    [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\r\n    [\r\n        \"1P 4P 5P 7m 9m\",\r\n        \"suspended fourth flat ninth\",\r\n        \"b9sus phryg 7b9sus 7b9sus4\",\r\n    ],\r\n    // ==Other==\r\n    [\"1P 5P\", \"fifth\", \"5\"],\r\n    [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\r\n    [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\r\n    [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\r\n    [\r\n        \"1P 3M 5P 7M 9M 11A\",\r\n        \"major sharp eleventh (lydian)\",\r\n        \"maj9#11 Δ9#11 ^9#11\",\r\n    ],\r\n    // ==Legacy==\r\n    [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\r\n    [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\r\n    [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\r\n    [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\r\n    [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\r\n    [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\r\n    [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\r\n    [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\r\n    [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\r\n    [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\r\n    [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\r\n    [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\r\n    [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\r\n    [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\r\n    [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\r\n    [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\r\n    [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\r\n    [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\r\n    [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\r\n    [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\r\n    [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\r\n    [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\r\n    [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\r\n    [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\r\n    [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\r\n    [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\r\n    [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\r\n    [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\r\n    [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\r\n    [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\r\n    [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\r\n    [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\r\n    [\"1P 3M 5d\", \"\", \"Mb5\"],\r\n    [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\r\n    [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\r\n    [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\r\n    [\"1P 3M 5d 7m\", \"\", \"7b5\"],\r\n    [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\r\n    [\"1P 3M 7m\", \"\", \"7no5\"],\r\n    [\"1P 3M 7m 13m\", \"\", \"7b13\"],\r\n    [\"1P 3M 7m 9M\", \"\", \"9no5\"],\r\n    [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\r\n    [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\r\n    [\"1P 3m 4P 5P\", \"\", \"madd4\"],\r\n    [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\r\n    [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\r\n    [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\r\n    [\"1P 3m 5P 9M\", \"\", \"madd9\"],\r\n    [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\r\n    [\"1P 3m 5d 7M\", \"\", \"oM7\"],\r\n    [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\r\n    [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\r\n    [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\r\n    [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\r\n    [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\r\n    [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\r\n    [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\r\n    [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\r\n    [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\r\n    [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\r\n    [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\r\n    [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\r\n    [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\r\n    [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\r\n    [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\r\n    [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\r\n];\n\nconst NoChordType = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    quality: \"Unknown\",\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\n/**\r\n * Given a chord name or chroma, return the chord properties\r\n * @param {string} source - chord name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/chord-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoChordType;\r\n}\r\nconst chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\r\n/**\r\n * Get all chord (long) names\r\n */\r\nfunction names() {\r\n    return dictionary.map((chord) => chord.name).filter((x) => x);\r\n}\r\n/**\r\n * Get all chord symbols\r\n */\r\nfunction symbols() {\r\n    return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\r\n}\r\n/**\r\n * Keys used to reference chord types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Return a list of all chord types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a chord to the dictionary.\r\n * @param intervals\r\n * @param aliases\r\n * @param [fullName]\r\n */\r\nfunction add(intervals, aliases, fullName) {\r\n    const quality = getQuality(intervals);\r\n    const chord = {\r\n        ...get$1(intervals),\r\n        name: fullName || \"\",\r\n        quality,\r\n        intervals,\r\n        aliases,\r\n    };\r\n    dictionary.push(chord);\r\n    if (chord.name) {\r\n        index[chord.name] = chord;\r\n    }\r\n    index[chord.setNum] = chord;\r\n    index[chord.chroma] = chord;\r\n    chord.aliases.forEach((alias) => addAlias(chord, alias));\r\n}\r\nfunction addAlias(chord, alias) {\r\n    index[alias] = chord;\r\n}\r\nfunction getQuality(intervals) {\r\n    const has = (interval) => intervals.indexOf(interval) !== -1;\r\n    return has(\"5A\")\r\n        ? \"Augmented\"\r\n        : has(\"3M\")\r\n            ? \"Major\"\r\n            : has(\"5d\")\r\n                ? \"Diminished\"\r\n                : has(\"3m\")\r\n                    ? \"Minor\"\r\n                    : \"Unknown\";\r\n}\r\nCHORDS.forEach(([ivls, fullName, names]) => add(ivls.split(\" \"), names.split(\" \"), fullName));\r\ndictionary.sort((a, b) => a.setNum - b.setNum);\r\nvar index$1 = {\r\n    names,\r\n    symbols,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    chordType,\r\n};\n\nexport { add, addAlias, all, chordType, index$1 as default, entries, get, keys, names, removeAll, symbols };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate } from '@tonaljs/core';\nimport { EmptyPcset, get as get$1 } from '@tonaljs/pcset';\n\n// SCALES\r\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\r\nconst SCALES = [\r\n    // 5-note scales\r\n    [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\r\n    [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\r\n    [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\r\n    [\"1P 2M 4P 5P 6M\", \"ritusen\"],\r\n    [\"1P 2M 4P 5P 7m\", \"egyptian\"],\r\n    [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\r\n    [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\r\n    [\"1P 2m 3m 5P 6m\", \"pelog\"],\r\n    [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\r\n    [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\r\n    [\"1P 2m 4P 5d 7m\", \"iwato\"],\r\n    [\"1P 2m 4P 5P 7m\", \"in-sen\"],\r\n    [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\r\n    [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\r\n    [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\r\n    [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\r\n    [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\r\n    [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\r\n    [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\r\n    [\"1P 2m 3M 5P 6M\", \"scriabin\"],\r\n    [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\r\n    [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\r\n    [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\r\n    [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\r\n    [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\r\n    // 6-note scales\r\n    [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\r\n    [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\r\n    [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\r\n    [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\r\n    [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\r\n    [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\r\n    [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\r\n    [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\r\n    [\"1P 2M 3M 4A 5A 7m\", \"whole tone\", \"messiaen's mode #1\"],\r\n    [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\r\n    [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\r\n    // 7-note scales\r\n    [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\r\n    [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\r\n    [\r\n        \"1P 2m 2A 3M 4A 6m 7m\",\r\n        \"altered\",\r\n        \"super locrian\",\r\n        \"diminished whole tone\",\r\n        \"pomeroy\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\r\n    [\r\n        \"1P 2M 3M 4P 5P 6m 7m\",\r\n        \"mixolydian b6\",\r\n        \"melodic minor fifth mode\",\r\n        \"hindu\",\r\n    ],\r\n    [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\r\n    [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\r\n    [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\r\n    [\r\n        \"1P 2m 3m 4P 5P 6M 7m\",\r\n        \"dorian b2\",\r\n        \"phrygian #6\",\r\n        \"melodic minor second mode\",\r\n    ],\r\n    [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\r\n    [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\r\n    [\r\n        \"1P 2m 3m 4d 5d 6m 7d\",\r\n        \"ultralocrian\",\r\n        \"superlocrian bb7\",\r\n        \"superlocrian diminished\",\r\n    ],\r\n    [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\r\n    [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\r\n    // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\r\n    [\r\n        \"1P 2M 3m 4A 5P 6M 7m\",\r\n        \"dorian #4\",\r\n        \"ukrainian dorian\",\r\n        \"romanian minor\",\r\n        \"altered dorian\",\r\n    ],\r\n    [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\r\n    [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\r\n    [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\r\n    [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\r\n    [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m\", \"aeolian\", \"minor\"],\r\n    [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\r\n    [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\r\n    [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\r\n    [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\r\n    [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\r\n    [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\r\n    [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\r\n    [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\r\n    [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\r\n    [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\r\n    [\r\n        \"1P 2M 3M 4P 5A 6M 7M\",\r\n        \"major augmented\",\r\n        \"major #5\",\r\n        \"ionian augmented\",\r\n        \"ionian #5\",\r\n    ],\r\n    [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\r\n    // 8-note scales\r\n    [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\r\n    [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\r\n    [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\r\n    [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\r\n    [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\r\n    [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\r\n    [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\r\n    [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\r\n    [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\r\n    [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\r\n    [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\r\n    [\r\n        \"1P 2m 3m 3M 4A 5P 6M 7m\",\r\n        \"half-whole diminished\",\r\n        \"dominant diminished\",\r\n        \"messiaen's mode #2\",\r\n    ],\r\n    [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\r\n    [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\r\n    // 9-note scales\r\n    [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\r\n    [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\r\n    // 10-note scales\r\n    [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\r\n    // 12-note scales\r\n    [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\r\n];\n\nconst NoScaleType = {\r\n    ...EmptyPcset,\r\n    intervals: [],\r\n    aliases: [],\r\n};\r\nlet dictionary = [];\r\nlet index = {};\r\nfunction names() {\r\n    return dictionary.map((scale) => scale.name);\r\n}\r\n/**\r\n * Given a scale name or chroma, return the scale properties\r\n *\r\n * @param {string} type - scale name or pitch class set chroma\r\n * @example\r\n * import { get } from 'tonaljs/scale-type'\r\n * get('major') // => { name: 'major', ... }\r\n */\r\nfunction get(type) {\r\n    return index[type] || NoScaleType;\r\n}\r\nconst scaleType = deprecate(\"ScaleDictionary.scaleType\", \"ScaleType.get\", get);\r\n/**\r\n * Return a list of all scale types\r\n */\r\nfunction all() {\r\n    return dictionary.slice();\r\n}\r\nconst entries = deprecate(\"ScaleDictionary.entries\", \"ScaleType.all\", all);\r\n/**\r\n * Keys used to reference scale types\r\n */\r\nfunction keys() {\r\n    return Object.keys(index);\r\n}\r\n/**\r\n * Clear the dictionary\r\n */\r\nfunction removeAll() {\r\n    dictionary = [];\r\n    index = {};\r\n}\r\n/**\r\n * Add a scale into dictionary\r\n * @param intervals\r\n * @param name\r\n * @param aliases\r\n */\r\nfunction add(intervals, name, aliases = []) {\r\n    const scale = { ...get$1(intervals), name, intervals, aliases };\r\n    dictionary.push(scale);\r\n    index[scale.name] = scale;\r\n    index[scale.setNum] = scale;\r\n    index[scale.chroma] = scale;\r\n    scale.aliases.forEach((alias) => addAlias(scale, alias));\r\n    return scale;\r\n}\r\nfunction addAlias(scale, alias) {\r\n    index[alias] = scale;\r\n}\r\nSCALES.forEach(([ivls, name, ...aliases]) => add(ivls.split(\" \"), name, aliases));\r\nvar index$1 = {\r\n    names,\r\n    get,\r\n    all,\r\n    add,\r\n    removeAll,\r\n    keys,\r\n    // deprecated\r\n    entries,\r\n    scaleType,\r\n};\n\nexport { NoScaleType, add, addAlias, all, index$1 as default, entries, get, keys, names, removeAll, scaleType };\n//# sourceMappingURL=index.es.js.map\n","import { detect } from '@tonaljs/chord-detect';\nexport { detect } from '@tonaljs/chord-detect';\nimport { get as get$1, all as all$1 } from '@tonaljs/chord-type';\nimport { deprecate, tokenizeNote, note, distance, transpose as transpose$1 } from '@tonaljs/core';\nimport { isSupersetOf, isSubsetOf } from '@tonaljs/pcset';\nimport { all } from '@tonaljs/scale-type';\n\nconst NoChord = {\r\n    empty: true,\r\n    name: \"\",\r\n    symbol: \"\",\r\n    root: \"\",\r\n    rootDegree: 0,\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    quality: \"Unknown\",\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\r\n// (see https://github.com/danigb/tonal/issues/55)\r\nconst NUM_TYPES = /^(6|64|7|9|11|13)$/;\r\n/**\r\n * Tokenize a chord name. It returns an array with the tonic and chord type\r\n * If not tonic is found, all the name is considered the chord name.\r\n *\r\n * This function does NOT check if the chord type exists or not. It only tries\r\n * to split the tonic and chord type.\r\n *\r\n * @function\r\n * @param {string} name - the chord name\r\n * @return {Array} an array with [tonic, type]\r\n * @example\r\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\r\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\r\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\r\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\r\n */\r\nfunction tokenize(name) {\r\n    const [letter, acc, oct, type] = tokenizeNote(name);\r\n    if (letter === \"\") {\r\n        return [\"\", name];\r\n    }\r\n    // aug is augmented (see https://github.com/danigb/tonal/issues/55)\r\n    if (letter === \"A\" && type === \"ug\") {\r\n        return [\"\", \"aug\"];\r\n    }\r\n    // see: https://github.com/tonaljs/tonal/issues/70\r\n    if (!type && (oct === \"4\" || oct === \"5\")) {\r\n        return [letter + acc, oct];\r\n    }\r\n    if (NUM_TYPES.test(oct)) {\r\n        return [letter + acc, oct + type];\r\n    }\r\n    else {\r\n        return [letter + acc + oct, type];\r\n    }\r\n}\r\n/**\r\n * Get a Chord from a chord name.\r\n */\r\nfunction get(src) {\r\n    if (src === \"\") {\r\n        return NoChord;\r\n    }\r\n    if (Array.isArray(src) && src.length === 2) {\r\n        return getChord(src[1], src[0]);\r\n    }\r\n    else {\r\n        const [tonic, type] = tokenize(src);\r\n        const chord = getChord(type, tonic);\r\n        return chord.empty ? getChord(src) : chord;\r\n    }\r\n}\r\n/**\r\n * Get chord properties\r\n *\r\n * @param typeName - the chord type name\r\n * @param [tonic] - Optional tonic\r\n * @param [root]  - Optional root (requires a tonic)\r\n */\r\nfunction getChord(typeName, optionalTonic, optionalRoot) {\r\n    const type = get$1(typeName);\r\n    const tonic = note(optionalTonic || \"\");\r\n    const root = note(optionalRoot || \"\");\r\n    if (type.empty ||\r\n        (optionalTonic && tonic.empty) ||\r\n        (optionalRoot && root.empty)) {\r\n        return NoChord;\r\n    }\r\n    const rootInterval = distance(tonic.pc, root.pc);\r\n    const rootDegree = type.intervals.indexOf(rootInterval) + 1;\r\n    if (!root.empty && !rootDegree) {\r\n        return NoChord;\r\n    }\r\n    const intervals = Array.from(type.intervals);\r\n    for (let i = 1; i < rootDegree; i++) {\r\n        const num = intervals[0][0];\r\n        const quality = intervals[0][1];\r\n        const newNum = parseInt(num, 10) + 7;\r\n        intervals.push(`${newNum}${quality}`);\r\n        intervals.shift();\r\n    }\r\n    const notes = tonic.empty\r\n        ? []\r\n        : intervals.map((i) => transpose$1(tonic, i));\r\n    typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\r\n    const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${root.empty || rootDegree <= 1 ? \"\" : \"/\" + root.pc}`;\r\n    const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${rootDegree > 1 && optionalRoot ? \" over \" + root.pc : \"\"}`;\r\n    return {\r\n        ...type,\r\n        name,\r\n        symbol,\r\n        type: type.name,\r\n        root: root.name,\r\n        intervals,\r\n        rootDegree,\r\n        tonic: tonic.name,\r\n        notes,\r\n    };\r\n}\r\nconst chord = deprecate(\"Chord.chord\", \"Chord.get\", get);\r\n/**\r\n * Transpose a chord name\r\n *\r\n * @param {string} chordName - the chord name\r\n * @return {string} the transposed chord\r\n *\r\n * @example\r\n * transpose('Dm7', 'P4') // => 'Gm7\r\n */\r\nfunction transpose(chordName, interval) {\r\n    const [tonic, type] = tokenize(chordName);\r\n    if (!tonic) {\r\n        return chordName;\r\n    }\r\n    return transpose$1(tonic, interval) + type;\r\n}\r\n/**\r\n * Get all scales where the given chord fits\r\n *\r\n * @example\r\n * chordScales('C7b9')\r\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\r\n */\r\nfunction chordScales(name) {\r\n    const s = get(name);\r\n    const isChordIncluded = isSupersetOf(s.chroma);\r\n    return all()\r\n        .filter((scale) => isChordIncluded(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Get all chords names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @example\r\n * extended(\"CMaj7\")\r\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\r\n */\r\nfunction extended(chordName) {\r\n    const s = get(chordName);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSuperset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\n/**\r\n * Find all chords names that are a subset of the given one\r\n * (has less notes but all from the given chord)\r\n *\r\n * @example\r\n */\r\nfunction reduced(chordName) {\r\n    const s = get(chordName);\r\n    const isSubset = isSubsetOf(s.chroma);\r\n    return all$1()\r\n        .filter((chord) => isSubset(chord.chroma))\r\n        .map((chord) => s.tonic + chord.aliases[0]);\r\n}\r\nvar index = {\r\n    getChord,\r\n    get,\r\n    detect,\r\n    chordScales,\r\n    extended,\r\n    reduced,\r\n    tokenize,\r\n    transpose,\r\n    // deprecate\r\n    chord,\r\n};\n\nexport { chord, chordScales, index as default, extended, get, getChord, reduced, tokenize, transpose };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { note } from '@tonaljs/core';\nimport { modes } from '@tonaljs/pcset';\n\nconst namedSet = (notes) => {\r\n    const pcToName = notes.reduce((record, n) => {\r\n        const chroma = note(n).chroma;\r\n        if (chroma !== undefined) {\r\n            record[chroma] = record[chroma] || note(n).name;\r\n        }\r\n        return record;\r\n    }, {});\r\n    return (chroma) => pcToName[chroma];\r\n};\r\nfunction detect(source) {\r\n    const notes = source.map((n) => note(n).pc).filter((x) => x);\r\n    if (note.length === 0) {\r\n        return [];\r\n    }\r\n    const found = findExactMatches(notes, 1);\r\n    return found\r\n        .filter((chord) => chord.weight)\r\n        .sort((a, b) => b.weight - a.weight)\r\n        .map((chord) => chord.name);\r\n}\r\nfunction findExactMatches(notes, weight) {\r\n    const tonic = notes[0];\r\n    const tonicChroma = note(tonic).chroma;\r\n    const noteName = namedSet(notes);\r\n    // we need to test all chormas to get the correct baseNote\r\n    const allModes = modes(notes, false);\r\n    const found = [];\r\n    allModes.forEach((mode, index) => {\r\n        // some chords could have the same chroma but different interval spelling\r\n        const chordTypes = all().filter((chordType) => chordType.chroma === mode);\r\n        chordTypes.forEach((chordType) => {\r\n            const chordName = chordType.aliases[0];\r\n            const baseNote = noteName(index);\r\n            const isInversion = index !== tonicChroma;\r\n            if (isInversion) {\r\n                found.push({\r\n                    weight: 0.5 * weight,\r\n                    name: `${baseNote}${chordName}/${tonic}`,\r\n                });\r\n            }\r\n            else {\r\n                found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\r\n            }\r\n        });\r\n    });\r\n    return found;\r\n}\r\nvar index = { detect };\n\nexport { index as default, detect };\n//# sourceMappingURL=index.es.js.map\n","// source: https://en.wikipedia.org/wiki/Note_value\r\nconst DATA = [\r\n    [\r\n        0.125,\r\n        \"dl\",\r\n        [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\r\n    ],\r\n    [0.25, \"l\", [\"long\", \"longa\"]],\r\n    [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\r\n    [1, \"w\", [\"whole\", \"semibreve\"]],\r\n    [2, \"h\", [\"half\", \"minim\"]],\r\n    [4, \"q\", [\"quarter\", \"crotchet\"]],\r\n    [8, \"e\", [\"eighth\", \"quaver\"]],\r\n    [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\r\n    [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\r\n    [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\r\n    [128, \"h\", [\"hundred twenty-eighth\"]],\r\n    [256, \"th\", [\"two hundred fifty-sixth\"]],\r\n];\n\nconst VALUES = [];\r\nDATA.forEach(([denominator, shorthand, names]) => add(denominator, shorthand, names));\r\nconst NoDuration = {\r\n    empty: true,\r\n    name: \"\",\r\n    value: 0,\r\n    fraction: [0, 0],\r\n    shorthand: \"\",\r\n    dots: \"\",\r\n    names: [],\r\n};\r\nfunction names() {\r\n    return VALUES.reduce((names, duration) => {\r\n        duration.names.forEach((name) => names.push(name));\r\n        return names;\r\n    }, []);\r\n}\r\nfunction shorthands() {\r\n    return VALUES.map((dur) => dur.shorthand);\r\n}\r\nconst REGEX = /^([^.]+)(\\.*)$/;\r\nfunction get(name) {\r\n    const [_, simple, dots] = REGEX.exec(name) || [];\r\n    const base = VALUES.find((dur) => dur.shorthand === simple || dur.names.includes(simple));\r\n    if (!base) {\r\n        return NoDuration;\r\n    }\r\n    const fraction = calcDots(base.fraction, dots.length);\r\n    const value = fraction[0] / fraction[1];\r\n    return { ...base, name, dots, value, fraction };\r\n}\r\nconst value = (name) => get(name).value;\r\nconst fraction = (name) => get(name).fraction;\r\nvar index = { names, shorthands, get, value, fraction };\r\n//// PRIVATE ////\r\nfunction add(denominator, shorthand, names) {\r\n    VALUES.push({\r\n        empty: false,\r\n        dots: \"\",\r\n        name: \"\",\r\n        value: 1 / denominator,\r\n        fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\r\n        shorthand,\r\n        names,\r\n    });\r\n}\r\nfunction calcDots(fraction, dots) {\r\n    const pow = Math.pow(2, dots);\r\n    let numerator = fraction[0] * pow;\r\n    let denominator = fraction[1] * pow;\r\n    const base = numerator;\r\n    // add fractions\r\n    for (let i = 0; i < dots; i++) {\r\n        numerator += base / Math.pow(2, i + 1);\r\n    }\r\n    // simplify\r\n    while (numerator % 2 === 0 && denominator % 2 === 0) {\r\n        numerator /= 2;\r\n        denominator /= 2;\r\n    }\r\n    return [numerator, denominator];\r\n}\n\nexport { index as default, fraction, get, names, shorthands, value };\n//# sourceMappingURL=index.es.js.map\n","import { interval, distance as distance$1, coordToInterval } from '@tonaljs/core';\n\n/**\r\n * Get the natural list of names\r\n */\r\nfunction names() {\r\n    return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\r\n}\r\n/**\r\n * Get properties of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\r\n */\r\nconst get = interval;\r\n/**\r\n * Get name of an interval\r\n *\r\n * @function\r\n * @example\r\n * Interval.name('4P') // => \"4P\"\r\n * Interval.name('P4') // => \"4P\"\r\n * Interval.name('C4') // => \"\"\r\n */\r\nconst name = (name) => interval(name).name;\r\n/**\r\n * Get semitones of an interval\r\n * @function\r\n * @example\r\n * Interval.semitones('P4') // => 5\r\n */\r\nconst semitones = (name) => interval(name).semitones;\r\n/**\r\n * Get quality of an interval\r\n * @function\r\n * @example\r\n * Interval.quality('P4') // => \"P\"\r\n */\r\nconst quality = (name) => interval(name).q;\r\n/**\r\n * Get number of an interval\r\n * @function\r\n * @example\r\n * Interval.num('P4') // => 4\r\n */\r\nconst num = (name) => interval(name).num;\r\n/**\r\n * Get the simplified version of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to simplify\r\n * @return {string} the simplified interval\r\n *\r\n * @example\r\n * Interval.simplify(\"9M\") // => \"2M\"\r\n * Interval.simplify(\"2M\") // => \"2M\"\r\n * Interval.simplify(\"-2M\") // => \"7m\"\r\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\r\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\r\n */\r\nfunction simplify(name) {\r\n    const i = interval(name);\r\n    return i.empty ? \"\" : i.simple + i.q;\r\n}\r\n/**\r\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\r\n * of an interval.\r\n *\r\n * @function\r\n * @param {string} interval - the interval to invert in interval shorthand\r\n * notation or interval array notation\r\n * @return {string} the inverted interval\r\n *\r\n * @example\r\n * Interval.invert(\"3m\") // => \"6M\"\r\n * Interval.invert(\"2M\") // => \"7m\"\r\n */\r\nfunction invert(name) {\r\n    const i = interval(name);\r\n    if (i.empty) {\r\n        return \"\";\r\n    }\r\n    const step = (7 - i.step) % 7;\r\n    const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\r\n    return interval({ step, alt, oct: i.oct, dir: i.dir }).name;\r\n}\r\n// interval numbers\r\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\r\n// interval qualities\r\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\r\n/**\r\n * Get interval name from semitones number. Since there are several interval\r\n * names for the same number, the name it's arbitrary, but deterministic.\r\n *\r\n * @param {Integer} num - the number of semitones (can be negative)\r\n * @return {string} the interval name\r\n * @example\r\n * Interval.fromSemitones(7) // => \"5P\"\r\n * Interval.fromSemitones(-7) // => \"-5P\"\r\n */\r\nfunction fromSemitones(semitones) {\r\n    const d = semitones < 0 ? -1 : 1;\r\n    const n = Math.abs(semitones);\r\n    const c = n % 12;\r\n    const o = Math.floor(n / 12);\r\n    return d * (IN[c] + 7 * o) + IQ[c];\r\n}\r\n/**\r\n * Find interval between two notes\r\n *\r\n * @example\r\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\r\n */\r\nconst distance = distance$1;\r\n/**\r\n * Adds two intervals\r\n *\r\n * @function\r\n * @param {string} interval1\r\n * @param {string} interval2\r\n * @return {string} the added interval name\r\n * @example\r\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\r\n */\r\nconst add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\r\n/**\r\n * Returns a function that adds an interval\r\n *\r\n * @function\r\n * @example\r\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\r\n */\r\nconst addTo = (interval) => (other) => add(interval, other);\r\n/**\r\n * Subtracts two intervals\r\n *\r\n * @function\r\n * @param {string} minuendInterval\r\n * @param {string} subtrahendInterval\r\n * @return {string} the substracted interval name\r\n * @example\r\n * Interval.substract('5P', '3M') // => '3m'\r\n * Interval.substract('3M', '5P') // => '-3m'\r\n */\r\nconst substract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\r\nfunction transposeFifths(interval, fifths) {\r\n    const ivl = get(interval);\r\n    if (ivl.empty)\r\n        return \"\";\r\n    const [nFifths, nOcts, dir] = ivl.coord;\r\n    return coordToInterval([nFifths + fifths, nOcts, dir]).name;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    num,\r\n    semitones,\r\n    quality,\r\n    fromSemitones,\r\n    distance,\r\n    invert,\r\n    simplify,\r\n    add,\r\n    addTo,\r\n    substract,\r\n    transposeFifths,\r\n};\r\nfunction combinator(fn) {\r\n    return (a, b) => {\r\n        const coordA = interval(a).coord;\r\n        const coordB = interval(b).coord;\r\n        if (coordA && coordB) {\r\n            const coord = fn(coordA, coordB);\r\n            return coordToInterval(coord).name;\r\n        }\r\n    };\r\n}\n\nexport { add, addTo, index as default, distance, fromSemitones, get, invert, name, names, num, quality, semitones, simplify, substract, transposeFifths };\n//# sourceMappingURL=index.es.js.map\n","import { note } from '@tonaljs/core';\n\nfunction isMidi(arg) {\r\n    return +arg >= 0 && +arg <= 127;\r\n}\r\n/**\r\n * Get the note midi number (a number between 0 and 127)\r\n *\r\n * It returns undefined if not valid note name\r\n *\r\n * @function\r\n * @param {string|number} note - the note name or midi number\r\n * @return {Integer} the midi number or undefined if not valid note\r\n * @example\r\n * import { toMidi } from '@tonaljs/midi'\r\n * toMidi(\"C4\") // => 60\r\n * toMidi(60) // => 60\r\n * toMidi('60') // => 60\r\n */\r\nfunction toMidi(note$1) {\r\n    if (isMidi(note$1)) {\r\n        return +note$1;\r\n    }\r\n    const n = note(note$1);\r\n    return n.empty ? null : n.midi;\r\n}\r\n/**\r\n * Get the frequency in hertzs from midi number\r\n *\r\n * @param {number} midi - the note midi number\r\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\r\n * @return {number} the frequency or null if not valid note midi\r\n * @example\r\n * import { midiToFreq} from '@tonaljs/midi'\r\n * midiToFreq(69) // => 440\r\n */\r\nfunction midiToFreq(midi, tuning = 440) {\r\n    return Math.pow(2, (midi - 69) / 12) * tuning;\r\n}\r\nconst L2 = Math.log(2);\r\nconst L440 = Math.log(440);\r\n/**\r\n * Get the midi number from a frequency in hertz. The midi number can\r\n * contain decimals (with two digits precission)\r\n *\r\n * @param {number} frequency\r\n * @return {number}\r\n * @example\r\n * import { freqToMidi} from '@tonaljs/midi'\r\n * freqToMidi(220)); //=> 57\r\n * freqToMidi(261.62)); //=> 60\r\n * freqToMidi(261)); //=> 59.96\r\n */\r\nfunction freqToMidi(freq) {\r\n    const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\r\n    return Math.round(v * 100) / 100;\r\n}\r\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\r\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\r\n/**\r\n * Given a midi number, returns a note name. The altered notes will have\r\n * flats unless explicitly set with the optional `useSharps` parameter.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\r\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\r\n * @return {string} the note name\r\n * @example\r\n * import { midiToNoteName } from '@tonaljs/midi'\r\n * midiToNoteName(61) // => \"Db4\"\r\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\r\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\r\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\r\n * // it rounds to nearest note\r\n * midiToNoteName(61.7) // => \"D4\"\r\n */\r\nfunction midiToNoteName(midi, options = {}) {\r\n    if (isNaN(midi) || midi === -Infinity || midi === Infinity)\r\n        return \"\";\r\n    midi = Math.round(midi);\r\n    const pcs = options.sharps === true ? SHARPS : FLATS;\r\n    const pc = pcs[midi % 12];\r\n    if (options.pitchClass) {\r\n        return pc;\r\n    }\r\n    const o = Math.floor(midi / 12) - 1;\r\n    return pc + o;\r\n}\r\nvar index = { isMidi, toMidi, midiToFreq, midiToNoteName, freqToMidi };\n\nexport { index as default, freqToMidi, isMidi, midiToFreq, midiToNoteName, toMidi };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose as transpose$1, coordToNote } from '@tonaljs/core';\nimport { midiToNoteName, freqToMidi } from '@tonaljs/midi';\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\r\nconst toName = (n) => n.name;\r\nconst onlyNotes = (array) => array.map(note).filter((n) => !n.empty);\r\n/**\r\n * Return the natural note names without octave\r\n * @function\r\n * @example\r\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\r\n */\r\nfunction names(array) {\r\n    if (array === undefined) {\r\n        return NAMES.slice();\r\n    }\r\n    else if (!Array.isArray(array)) {\r\n        return [];\r\n    }\r\n    else {\r\n        return onlyNotes(array).map(toName);\r\n    }\r\n}\r\n/**\r\n * Get a note from a note name\r\n *\r\n * @function\r\n * @example\r\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\r\n */\r\nconst get = note;\r\n/**\r\n * Get the note name\r\n * @function\r\n */\r\nconst name = (note) => get(note).name;\r\n/**\r\n * Get the note pitch class name\r\n * @function\r\n */\r\nconst pitchClass = (note) => get(note).pc;\r\n/**\r\n * Get the note accidentals\r\n * @function\r\n */\r\nconst accidentals = (note) => get(note).acc;\r\n/**\r\n * Get the note octave\r\n * @function\r\n */\r\nconst octave = (note) => get(note).oct;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst midi = (note) => get(note).midi;\r\n/**\r\n * Get the note midi\r\n * @function\r\n */\r\nconst freq = (note) => get(note).freq;\r\n/**\r\n * Get the note chroma\r\n * @function\r\n */\r\nconst chroma = (note) => get(note).chroma;\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidi(61) // => \"Db4\"\r\n * Note.fromMidi(61.7) // => \"D4\"\r\n */\r\nfunction fromMidi(midi) {\r\n    return midiToNoteName(midi);\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreq(freq) {\r\n    return midiToNoteName(freqToMidi(freq));\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n */\r\nfunction fromFreqSharps(freq) {\r\n    return midiToNoteName(freqToMidi(freq), { sharps: true });\r\n}\r\n/**\r\n * Given a midi number, returns a note name. Uses flats for altered notes.\r\n *\r\n * @function\r\n * @param {number} midi - the midi note number\r\n * @return {string} the note name\r\n * @example\r\n * Note.fromMidiSharps(61) // => \"C#4\"\r\n */\r\nfunction fromMidiSharps(midi) {\r\n    return midiToNoteName(midi, { sharps: true });\r\n}\r\n/**\r\n * Transpose a note by an interval\r\n */\r\nconst transpose = transpose$1;\r\nconst tr = transpose$1;\r\n/**\r\n * Transpose by an interval.\r\n * @function\r\n * @param {string} interval\r\n * @return {function} a function that transposes by the given interval\r\n * @example\r\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\r\n * // => [\"G\", \"A\", \"B\"]\r\n */\r\nconst transposeBy = (interval) => (note) => transpose(note, interval);\r\nconst trBy = transposeBy;\r\n/**\r\n * Transpose from a note\r\n * @function\r\n * @param {string} note\r\n * @return {function}  a function that transposes the the note by an interval\r\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\r\n * // => [\"C\", \"E\", \"G\"]\r\n */\r\nconst transposeFrom = (note) => (interval) => transpose(note, interval);\r\nconst trFrom = transposeFrom;\r\n/**\r\n * Transpose a note by a number of perfect fifths.\r\n *\r\n * @function\r\n * @param {string} note - the note name\r\n * @param {number} fifhts - the number of fifths\r\n * @return {string} the transposed note name\r\n *\r\n * @example\r\n * import { transposeFifths } from \"@tonaljs/note\"\r\n * transposeFifths(\"G4\", 1) // => \"D\"\r\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\r\n */\r\nfunction transposeFifths(noteName, fifths) {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    const [nFifths, nOcts] = note.coord;\r\n    const transposed = nOcts === undefined\r\n        ? coordToNote([nFifths + fifths])\r\n        : coordToNote([nFifths + fifths, nOcts]);\r\n    return transposed.name;\r\n}\r\nconst trFifths = transposeFifths;\r\nconst ascending = (a, b) => a.height - b.height;\r\nconst descending = (a, b) => b.height - a.height;\r\nfunction sortedNames(notes, comparator) {\r\n    comparator = comparator || ascending;\r\n    return onlyNotes(notes).sort(comparator).map(toName);\r\n}\r\nfunction sortedUniqNames(notes) {\r\n    return sortedNames(notes, ascending).filter((n, i, a) => i === 0 || n !== a[i - 1]);\r\n}\r\n/**\r\n * Simplify a note\r\n *\r\n * @function\r\n * @param {string} note - the note to be simplified\r\n * - sameAccType: default true. Use same kind of accidentals that source\r\n * @return {string} the simplified note or '' if not valid note\r\n * @example\r\n * simplify(\"C##\") // => \"D\"\r\n * simplify(\"C###\") // => \"D#\"\r\n * simplify(\"C###\")\r\n * simplify(\"B#4\") // => \"C5\"\r\n */\r\nconst simplify = (noteName) => {\r\n    const note = get(noteName);\r\n    if (note.empty) {\r\n        return \"\";\r\n    }\r\n    return midiToNoteName(note.midi || note.chroma, {\r\n        sharps: note.alt > 0,\r\n        pitchClass: note.midi === null,\r\n    });\r\n};\r\n/**\r\n * Get enharmonic of a note\r\n *\r\n * @function\r\n * @param {string} note\r\n * @param [string] - [optional] Destination pitch class\r\n * @return {string} the enharmonic note name or '' if not valid note\r\n * @example\r\n * Note.enharmonic(\"Db\") // => \"C#\"\r\n * Note.enharmonic(\"C\") // => \"C\"\r\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\r\n */\r\nfunction enharmonic(noteName, destName) {\r\n    const src = get(noteName);\r\n    if (src.empty) {\r\n        return \"\";\r\n    }\r\n    // destination: use given or generate one\r\n    const dest = get(destName ||\r\n        midiToNoteName(src.midi || src.chroma, {\r\n            sharps: src.alt < 0,\r\n            pitchClass: true,\r\n        }));\r\n    // ensure destination is valid\r\n    if (dest.empty || dest.chroma !== src.chroma) {\r\n        return \"\";\r\n    }\r\n    // if src has no octave, no need to calculate anything else\r\n    if (src.oct === undefined) {\r\n        return dest.pc;\r\n    }\r\n    // detect any octave overflow\r\n    const srcChroma = src.chroma - src.alt;\r\n    const destChroma = dest.chroma - dest.alt;\r\n    const destOctOffset = srcChroma > 11 || destChroma < 0\r\n        ? -1\r\n        : srcChroma < 0 || destChroma > 11\r\n            ? +1\r\n            : 0;\r\n    // calculate the new octave\r\n    const destOct = src.oct + destOctOffset;\r\n    return dest.pc + destOct;\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    name,\r\n    pitchClass,\r\n    accidentals,\r\n    octave,\r\n    midi,\r\n    ascending,\r\n    descending,\r\n    sortedNames,\r\n    sortedUniqNames,\r\n    fromMidi,\r\n    fromMidiSharps,\r\n    freq,\r\n    fromFreq,\r\n    fromFreqSharps,\r\n    chroma,\r\n    transpose,\r\n    tr,\r\n    transposeBy,\r\n    trBy,\r\n    transposeFrom,\r\n    trFrom,\r\n    transposeFifths,\r\n    trFifths,\r\n    simplify,\r\n    enharmonic,\r\n};\n\nexport { accidentals, ascending, chroma, index as default, descending, enharmonic, freq, fromFreq, fromFreqSharps, fromMidi, fromMidiSharps, get, midi, name, names, octave, pitchClass, simplify, sortedNames, sortedUniqNames, tr, trBy, trFifths, trFrom, transpose, transposeBy, transposeFifths, transposeFrom };\n//# sourceMappingURL=index.es.js.map\n","import { deprecate, isPitch, altToAcc, isNamed, accToAlt, interval } from '@tonaljs/core';\n\nconst NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\r\nconst cache = {};\r\n/**\r\n * Get properties of a roman numeral string\r\n *\r\n * @function\r\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\r\n * @return {Object} - the roman numeral properties\r\n * @param {string} name - the roman numeral (tonic)\r\n * @param {string} type - the chord type\r\n * @param {string} num - the number (1 = I, 2 = II...)\r\n * @param {boolean} major - major or not\r\n *\r\n * @example\r\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\r\n */\r\nfunction get(src) {\r\n    return typeof src === \"string\"\r\n        ? cache[src] || (cache[src] = parse(src))\r\n        : typeof src === \"number\"\r\n            ? get(NAMES[src] || \"\")\r\n            : isPitch(src)\r\n                ? fromPitch(src)\r\n                : isNamed(src)\r\n                    ? get(src.name)\r\n                    : NoRomanNumeral;\r\n}\r\nconst romanNumeral = deprecate(\"RomanNumeral.romanNumeral\", \"RomanNumeral.get\", get);\r\n/**\r\n * Get roman numeral names\r\n *\r\n * @function\r\n * @param {boolean} [isMajor=true]\r\n * @return {Array<String>}\r\n *\r\n * @example\r\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\r\n */\r\nfunction names(major = true) {\r\n    return (major ? NAMES : NAMES_MINOR).slice();\r\n}\r\nfunction fromPitch(pitch) {\r\n    return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\r\n}\r\nconst REGEX = /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\r\nfunction tokenize(str) {\r\n    return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]);\r\n}\r\nconst ROMANS = \"I II III IV V VI VII\";\r\nconst NAMES = ROMANS.split(\" \");\r\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\r\nfunction parse(src) {\r\n    const [name, acc, roman, chordType] = tokenize(src);\r\n    if (!roman) {\r\n        return NoRomanNumeral;\r\n    }\r\n    const upperRoman = roman.toUpperCase();\r\n    const step = NAMES.indexOf(upperRoman);\r\n    const alt = accToAlt(acc);\r\n    const dir = 1;\r\n    return {\r\n        empty: false,\r\n        name,\r\n        roman,\r\n        interval: interval({ step, alt, dir }).name,\r\n        acc,\r\n        chordType,\r\n        alt,\r\n        step,\r\n        major: roman === upperRoman,\r\n        oct: 0,\r\n        dir,\r\n    };\r\n}\r\nvar index = {\r\n    names,\r\n    get,\r\n    // deprecated\r\n    romanNumeral,\r\n};\n\nexport { index as default, get, names, tokenize };\n//# sourceMappingURL=index.es.js.map\n","import { note, transpose, altToAcc, accToAlt } from '@tonaljs/core';\nimport { transposeFifths } from '@tonaljs/note';\nimport { get } from '@tonaljs/roman-numeral';\n\nconst Empty = Object.freeze([]);\r\nconst NoKey = {\r\n    type: \"major\",\r\n    tonic: \"\",\r\n    alteration: 0,\r\n    keySignature: \"\",\r\n};\r\nconst NoKeyScale = {\r\n    tonic: \"\",\r\n    grades: Empty,\r\n    intervals: Empty,\r\n    scale: Empty,\r\n    chords: Empty,\r\n    chordsHarmonicFunction: Empty,\r\n    chordScales: Empty,\r\n};\r\nconst NoMajorKey = {\r\n    ...NoKey,\r\n    ...NoKeyScale,\r\n    type: \"major\",\r\n    minorRelative: \"\",\r\n    scale: Empty,\r\n    secondaryDominants: Empty,\r\n    secondaryDominantsMinorRelative: Empty,\r\n    substituteDominants: Empty,\r\n    substituteDominantsMinorRelative: Empty,\r\n};\r\nconst NoMinorKey = {\r\n    ...NoKey,\r\n    type: \"minor\",\r\n    relativeMajor: \"\",\r\n    natural: NoKeyScale,\r\n    harmonic: NoKeyScale,\r\n    melodic: NoKeyScale,\r\n};\r\nconst mapScaleToType = (scale, list, sep = \"\") => list.map((type, i) => `${scale[i]}${sep}${type}`);\r\nfunction keyScale(grades, chords, harmonicFunctions, chordScales) {\r\n    return (tonic) => {\r\n        const intervals = grades.map((gr) => get(gr).interval || \"\");\r\n        const scale = intervals.map((interval) => transpose(tonic, interval));\r\n        return {\r\n            tonic,\r\n            grades,\r\n            intervals,\r\n            scale,\r\n            chords: mapScaleToType(scale, chords),\r\n            chordsHarmonicFunction: harmonicFunctions.slice(),\r\n            chordScales: mapScaleToType(scale, chordScales, \" \"),\r\n        };\r\n    };\r\n}\r\nconst distInFifths = (from, to) => {\r\n    const f = note(from);\r\n    const t = note(to);\r\n    return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\r\n};\r\nconst MajorScale = keyScale(\"I II III IV V VI VII\".split(\" \"), \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"), \"T SD T SD D T D\".split(\" \"), \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"));\r\nconst NaturalScale = keyScale(\"I II bIII IV V bVI bVII\".split(\" \"), \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"), \"T SD T SD D SD SD\".split(\" \"), \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"));\r\nconst HarmonicScale = keyScale(\"I II bIII IV V bVI VII\".split(\" \"), \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"), \"T SD T SD D SD D\".split(\" \"), \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\",\"));\r\nconst MelodicScale = keyScale(\"I II bIII IV V VI VII\".split(\" \"), \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"), \"T SD T SD D  \".split(\" \"), \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\",\"));\r\n/**\r\n * Get a major key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction majorKey(tonic) {\r\n    const pc = note(tonic).pc;\r\n    if (!pc)\r\n        return NoMajorKey;\r\n    const keyScale = MajorScale(pc);\r\n    const alteration = distInFifths(\"C\", pc);\r\n    const romanInTonic = (src) => {\r\n        const r = get(src);\r\n        if (r.empty)\r\n            return \"\";\r\n        return transpose(tonic, r.interval) + r.chordType;\r\n    };\r\n    return {\r\n        ...keyScale,\r\n        type: \"major\",\r\n        minorRelative: transpose(pc, \"-3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\r\n        secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n        substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\r\n            .split(\" \")\r\n            .map(romanInTonic),\r\n    };\r\n}\r\n/**\r\n * Get minor key properties in a given tonic\r\n * @param tonic\r\n */\r\nfunction minorKey(tnc) {\r\n    const pc = note(tnc).pc;\r\n    if (!pc)\r\n        return NoMinorKey;\r\n    const alteration = distInFifths(\"C\", pc) - 3;\r\n    return {\r\n        type: \"minor\",\r\n        tonic: pc,\r\n        relativeMajor: transpose(pc, \"3m\"),\r\n        alteration,\r\n        keySignature: altToAcc(alteration),\r\n        natural: NaturalScale(pc),\r\n        harmonic: HarmonicScale(pc),\r\n        melodic: MelodicScale(pc),\r\n    };\r\n}\r\n/**\r\n * Given a key signature, returns the tonic of the major key\r\n * @param sigature\r\n * @example\r\n * majorTonicFromKeySignature('###') // => 'A'\r\n */\r\nfunction majorTonicFromKeySignature(sig) {\r\n    if (typeof sig === \"number\") {\r\n        return transposeFifths(\"C\", sig);\r\n    }\r\n    else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\r\n        return transposeFifths(\"C\", accToAlt(sig));\r\n    }\r\n    return null;\r\n}\r\nvar index = { majorKey, majorTonicFromKeySignature, minorKey };\n\nexport { index as default, majorKey, majorTonicFromKeySignature, minorKey };\n//# sourceMappingURL=index.es.js.map\n","import { rotate } from '@tonaljs/collection';\nimport { deprecate, transpose } from '@tonaljs/core';\nimport { simplify, transposeFifths } from '@tonaljs/interval';\nimport { EmptyPcset } from '@tonaljs/pcset';\nimport { get as get$1 } from '@tonaljs/scale-type';\n\nconst MODES = [\r\n    [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\r\n    [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\r\n    [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\r\n    [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\r\n    [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\r\n    [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\r\n    [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\r\n];\r\nconst NoMode = {\r\n    ...EmptyPcset,\r\n    name: \"\",\r\n    alt: 0,\r\n    modeNum: NaN,\r\n    triad: \"\",\r\n    seventh: \"\",\r\n    aliases: [],\r\n};\r\nconst modes = MODES.map(toMode);\r\nconst index = {};\r\nmodes.forEach((mode) => {\r\n    index[mode.name] = mode;\r\n    mode.aliases.forEach((alias) => {\r\n        index[alias] = mode;\r\n    });\r\n});\r\n/**\r\n * Get a Mode by it's name\r\n *\r\n * @example\r\n * get('dorian')\r\n * // =>\r\n * // {\r\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\r\n * //   modeNum: 1,\r\n * //   chroma: '101101010110',\r\n * //   normalized: '101101010110',\r\n * //   name: 'dorian',\r\n * //   setNum: 2902,\r\n * //   alt: 2,\r\n * //   triad: 'm',\r\n * //   seventh: 'm7',\r\n * //   aliases: []\r\n * // }\r\n */\r\nfunction get(name) {\r\n    return typeof name === \"string\"\r\n        ? index[name.toLowerCase()] || NoMode\r\n        : name && name.name\r\n            ? get(name.name)\r\n            : NoMode;\r\n}\r\nconst mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\r\n/**\r\n * Get a list of all modes\r\n */\r\nfunction all() {\r\n    return modes.slice();\r\n}\r\nconst entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\r\n/**\r\n * Get a list of all mode names\r\n */\r\nfunction names() {\r\n    return modes.map((mode) => mode.name);\r\n}\r\nfunction toMode(mode) {\r\n    const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\r\n    const aliases = alias ? [alias] : [];\r\n    const chroma = Number(setNum).toString(2);\r\n    const intervals = get$1(name).intervals;\r\n    return {\r\n        empty: false,\r\n        intervals,\r\n        modeNum,\r\n        chroma,\r\n        normalized: chroma,\r\n        name,\r\n        setNum,\r\n        alt,\r\n        triad,\r\n        seventh,\r\n        aliases,\r\n    };\r\n}\r\nfunction notes(modeName, tonic) {\r\n    return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\r\n}\r\nfunction chords(chords) {\r\n    return (modeName, tonic) => {\r\n        const mode = get(modeName);\r\n        if (mode.empty)\r\n            return [];\r\n        const triads = rotate(mode.modeNum, chords);\r\n        const tonics = mode.intervals.map((i) => transpose(tonic, i));\r\n        return triads.map((triad, i) => tonics[i] + triad);\r\n    };\r\n}\r\nconst triads = chords(MODES.map((x) => x[4]));\r\nconst seventhChords = chords(MODES.map((x) => x[5]));\r\nfunction distance(destination, source) {\r\n    const from = get(source);\r\n    const to = get(destination);\r\n    if (from.empty || to.empty)\r\n        return \"\";\r\n    return simplify(transposeFifths(\"1P\", to.alt - from.alt));\r\n}\r\nfunction relativeTonic(destination, source, tonic) {\r\n    return transpose(tonic, distance(destination, source));\r\n}\r\nvar index$1 = {\r\n    get,\r\n    names,\r\n    all,\r\n    distance,\r\n    relativeTonic,\r\n    notes,\r\n    triads,\r\n    seventhChords,\r\n    // deprecated\r\n    entries,\r\n    mode,\r\n};\n\nexport { all, index$1 as default, distance, entries, get, mode, names, notes, relativeTonic, seventhChords, triads };\n//# sourceMappingURL=index.es.js.map\n","import { tokenize } from '@tonaljs/chord';\nimport { transpose, interval, distance } from '@tonaljs/core';\nimport { get } from '@tonaljs/roman-numeral';\n\n/**\r\n * Given a tonic and a chord list expressed with roman numeral notation\r\n * returns the progression expressed with leadsheet chords symbols notation\r\n * @example\r\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\r\n * // => [\"C\", \"Dm7\", \"G7\"]\r\n */\r\nfunction fromRomanNumerals(tonic, chords) {\r\n    const romanNumerals = chords.map(get);\r\n    return romanNumerals.map((rn) => transpose(tonic, interval(rn)) + rn.chordType);\r\n}\r\n/**\r\n * Given a tonic and a chord list with leadsheet symbols notation,\r\n * return the chord list with roman numeral notation\r\n * @example\r\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\r\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\r\n */\r\nfunction toRomanNumerals(tonic, chords) {\r\n    return chords.map((chord) => {\r\n        const [note, chordType] = tokenize(chord);\r\n        const intervalName = distance(tonic, note);\r\n        const roman = get(interval(intervalName));\r\n        return roman.name + chordType;\r\n    });\r\n}\r\nvar index = { fromRomanNumerals, toRomanNumerals };\n\nexport { index as default, fromRomanNumerals, toRomanNumerals };\n//# sourceMappingURL=index.es.js.map\n","import { compact, range } from '@tonaljs/collection';\nimport { toMidi, midiToNoteName } from '@tonaljs/midi';\n\n/**\r\n * Create a numeric range. You supply a list of notes or numbers and it will\r\n * be connected to create complex ranges.\r\n *\r\n * @param {Array} notes - the list of notes or midi numbers used\r\n * @return {Array} an array of numbers or empty array if not valid parameters\r\n *\r\n * @example\r\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\r\n * // it works midi notes\r\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\r\n * // complex range\r\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\r\n */\r\nfunction numeric(notes) {\r\n    const midi = compact(notes.map(toMidi));\r\n    if (!notes.length || midi.length !== notes.length) {\r\n        // there is no valid notes\r\n        return [];\r\n    }\r\n    return midi.reduce((result, note) => {\r\n        const last = result[result.length - 1];\r\n        return result.concat(range(last, note).slice(1));\r\n    }, [midi[0]]);\r\n}\r\n/**\r\n * Create a range of chromatic notes. The altered notes will use flats.\r\n *\r\n * @function\r\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\r\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\r\n * @return {Array} an array of note names\r\n *\r\n * @example\r\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\r\n * // with sharps\r\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\r\n */\r\nfunction chromatic(notes, options) {\r\n    return numeric(notes).map((midi) => midiToNoteName(midi, options));\r\n}\r\nvar index = { numeric, chromatic };\n\nexport { chromatic, index as default, numeric };\n//# sourceMappingURL=index.es.js.map\n","import { all } from '@tonaljs/chord-type';\nimport { rotate, range } from '@tonaljs/collection';\nimport { deprecate, note, transpose } from '@tonaljs/core';\nimport { sortedUniqNames, fromMidi, enharmonic } from '@tonaljs/note';\nimport { isSubsetOf, isSupersetOf, modes } from '@tonaljs/pcset';\nimport { names as names$1, get as get$1, all as all$1 } from '@tonaljs/scale-type';\n\n/**\r\n * References:\r\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\r\n * @module scale\r\n */\r\nconst NoScale = {\r\n    empty: true,\r\n    name: \"\",\r\n    type: \"\",\r\n    tonic: null,\r\n    setNum: NaN,\r\n    chroma: \"\",\r\n    normalized: \"\",\r\n    aliases: [],\r\n    notes: [],\r\n    intervals: [],\r\n};\r\n/**\r\n * Given a string with a scale name and (optionally) a tonic, split\r\n * that components.\r\n *\r\n * It retuns an array with the form [ name, tonic ] where tonic can be a\r\n * note name or null and name can be any arbitrary string\r\n * (this function doesn\"t check if that scale name exists)\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array} an array [tonic, name]\r\n * @example\r\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\r\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\r\n * tokenize() // => [\"\", \"\"]\r\n */\r\nfunction tokenize(name) {\r\n    if (typeof name !== \"string\") {\r\n        return [\"\", \"\"];\r\n    }\r\n    const i = name.indexOf(\" \");\r\n    const tonic = note(name.substring(0, i));\r\n    if (tonic.empty) {\r\n        const n = note(name);\r\n        return n.empty ? [\"\", name] : [n.name, \"\"];\r\n    }\r\n    const type = name.substring(tonic.name.length + 1);\r\n    return [tonic.name, type.length ? type : \"\"];\r\n}\r\n/**\r\n * Get all scale names\r\n * @function\r\n */\r\nconst names = names$1;\r\n/**\r\n * Get a Scale from a scale name.\r\n */\r\nfunction get(src) {\r\n    const tokens = Array.isArray(src) ? src : tokenize(src);\r\n    const tonic = note(tokens[0]).name;\r\n    const st = get$1(tokens[1]);\r\n    if (st.empty) {\r\n        return NoScale;\r\n    }\r\n    const type = st.name;\r\n    const notes = tonic\r\n        ? st.intervals.map((i) => transpose(tonic, i))\r\n        : [];\r\n    const name = tonic ? tonic + \" \" + type : type;\r\n    return { ...st, name, type, tonic, notes };\r\n}\r\nconst scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\r\n/**\r\n * Get all chords that fits a given scale\r\n *\r\n * @function\r\n * @param {string} name - the scale name\r\n * @return {Array<string>} - the chord names\r\n *\r\n * @example\r\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\r\n */\r\nfunction scaleChords(name) {\r\n    const s = get(name);\r\n    const inScale = isSubsetOf(s.chroma);\r\n    return all()\r\n        .filter((chord) => inScale(chord.chroma))\r\n        .map((chord) => chord.aliases[0]);\r\n}\r\n/**\r\n * Get all scales names that are a superset of the given one\r\n * (has the same notes and at least one more)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n * @example\r\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\r\n */\r\nfunction extended(name) {\r\n    const s = get(name);\r\n    const isSuperset = isSupersetOf(s.chroma);\r\n    return all$1()\r\n        .filter((scale) => isSuperset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Find all scales names that are a subset of the given one\r\n * (has less notes but all from the given scale)\r\n *\r\n * @function\r\n * @param {string} name\r\n * @return {Array} a list of scale names\r\n *\r\n * @example\r\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\r\n */\r\nfunction reduced(name) {\r\n    const isSubset = isSubsetOf(get(name).chroma);\r\n    return all$1()\r\n        .filter((scale) => isSubset(scale.chroma))\r\n        .map((scale) => scale.name);\r\n}\r\n/**\r\n * Given an array of notes, return the scale: a pitch class set starting from\r\n * the first note of the array\r\n *\r\n * @function\r\n * @param {string[]} notes\r\n * @return {string[]} pitch classes with same tonic\r\n * @example\r\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\r\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\r\n */\r\nfunction scaleNotes(notes) {\r\n    const pcset = notes.map((n) => note(n).pc).filter((x) => x);\r\n    const tonic = pcset[0];\r\n    const scale = sortedUniqNames(pcset);\r\n    return rotate(scale.indexOf(tonic), scale);\r\n}\r\n/**\r\n * Find mode names of a scale\r\n *\r\n * @function\r\n * @param {string} name - scale name\r\n * @example\r\n * modeNames(\"C pentatonic\") // => [\r\n *   [\"C\", \"major pentatonic\"],\r\n *   [\"D\", \"egyptian\"],\r\n *   [\"E\", \"malkos raga\"],\r\n *   [\"G\", \"ritusen\"],\r\n *   [\"A\", \"minor pentatonic\"]\r\n * ]\r\n */\r\nfunction modeNames(name) {\r\n    const s = get(name);\r\n    if (s.empty) {\r\n        return [];\r\n    }\r\n    const tonics = s.tonic ? s.notes : s.intervals;\r\n    return modes(s.chroma)\r\n        .map((chroma, i) => {\r\n        const modeName = get(chroma).name;\r\n        return modeName ? [tonics[i], modeName] : [\"\", \"\"];\r\n    })\r\n        .filter((x) => x[0]);\r\n}\r\nfunction getNoteNameOf(scale) {\r\n    const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\r\n    const chromas = names.map((name) => note(name).chroma);\r\n    return (noteOrMidi) => {\r\n        const currNote = typeof noteOrMidi === \"number\"\r\n            ? note(fromMidi(noteOrMidi))\r\n            : note(noteOrMidi);\r\n        const height = currNote.height;\r\n        if (height === undefined)\r\n            return undefined;\r\n        const chroma = height % 12;\r\n        const position = chromas.indexOf(chroma);\r\n        if (position === -1)\r\n            return undefined;\r\n        return enharmonic(currNote.name, names[position]);\r\n    };\r\n}\r\nfunction rangeOf(scale) {\r\n    const getName = getNoteNameOf(scale);\r\n    return (fromNote, toNote) => {\r\n        const from = note(fromNote).height;\r\n        const to = note(toNote).height;\r\n        if (from === undefined || to === undefined)\r\n            return [];\r\n        return range(from, to)\r\n            .map(getName)\r\n            .filter((x) => x);\r\n    };\r\n}\r\nvar index = {\r\n    get,\r\n    names,\r\n    extended,\r\n    modeNames,\r\n    reduced,\r\n    scaleChords,\r\n    scaleNotes,\r\n    tokenize,\r\n    rangeOf,\r\n    // deprecated\r\n    scale,\r\n};\n\nexport { index as default, extended, get, modeNames, names, rangeOf, reduced, scale, scaleChords, scaleNotes, tokenize };\n//# sourceMappingURL=index.es.js.map\n","// CONSTANTS\r\nconst NONE = {\r\n    empty: true,\r\n    name: \"\",\r\n    upper: undefined,\r\n    lower: undefined,\r\n    type: undefined,\r\n    additive: [],\r\n};\r\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\r\n// PUBLIC API\r\nfunction names() {\r\n    return NAMES.slice();\r\n}\r\nconst REGEX = /^(\\d?\\d(?:\\+\\d)*)\\/(\\d)$/;\r\nconst CACHE = new Map();\r\nfunction get(literal) {\r\n    const cached = CACHE.get(literal);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const ts = build(parse(literal));\r\n    CACHE.set(literal, ts);\r\n    return ts;\r\n}\r\nfunction parse(literal) {\r\n    if (typeof literal === \"string\") {\r\n        const [_, up, low] = REGEX.exec(literal) || [];\r\n        return parse([up, low]);\r\n    }\r\n    const [up, down] = literal;\r\n    const denominator = +down;\r\n    if (typeof up === \"number\") {\r\n        return [up, denominator];\r\n    }\r\n    const list = up.split(\"+\").map((n) => +n);\r\n    return list.length === 1 ? [list[0], denominator] : [list, denominator];\r\n}\r\nvar index = { names, parse, get };\r\n// PRIVATE\r\nfunction build([up, down]) {\r\n    const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\r\n    const lower = down;\r\n    if (upper === 0 || lower === 0) {\r\n        return NONE;\r\n    }\r\n    const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\r\n    const additive = Array.isArray(up) ? up : [];\r\n    const type = lower === 4 || lower === 2\r\n        ? \"simple\"\r\n        : lower === 8 && upper % 3 === 0\r\n            ? \"compound\"\r\n            : \"irregular\";\r\n    return {\r\n        empty: false,\r\n        name,\r\n        type,\r\n        upper,\r\n        lower,\r\n        additive,\r\n    };\r\n}\n\nexport { index as default, get, names, parse };\n//# sourceMappingURL=index.es.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tonaljs/abc-notation'), require('@tonaljs/array'), require('@tonaljs/chord'), require('@tonaljs/chord-type'), require('@tonaljs/collection'), require('@tonaljs/core'), require('@tonaljs/duration-value'), require('@tonaljs/interval'), require('@tonaljs/key'), require('@tonaljs/midi'), require('@tonaljs/mode'), require('@tonaljs/note'), require('@tonaljs/pcset'), require('@tonaljs/progression'), require('@tonaljs/range'), require('@tonaljs/roman-numeral'), require('@tonaljs/scale'), require('@tonaljs/scale-type'), require('@tonaljs/time-signature')) :\n  typeof define === 'function' && define.amd ? define(['exports', '@tonaljs/abc-notation', '@tonaljs/array', '@tonaljs/chord', '@tonaljs/chord-type', '@tonaljs/collection', '@tonaljs/core', '@tonaljs/duration-value', '@tonaljs/interval', '@tonaljs/key', '@tonaljs/midi', '@tonaljs/mode', '@tonaljs/note', '@tonaljs/pcset', '@tonaljs/progression', '@tonaljs/range', '@tonaljs/roman-numeral', '@tonaljs/scale', '@tonaljs/scale-type', '@tonaljs/time-signature'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Tonal = {}, global.abcNotation, global.array, global.chord, global.ChordType, global.collection, global.Core, global.durationValue, global.interval, global.key, global.midi, global.mode, global.note, global.Pcset, global.progression, global.range, global.romanNumeral, global.scale, global.ScaleType, global.timeSignature));\n}(this, (function (exports, abcNotation, array, chord, ChordType, collection, Core, durationValue, interval, key, midi, mode, note, Pcset, progression, range, romanNumeral, scale, ScaleType, timeSignature) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = Object.create(null);\n    if (e) {\n      Object.keys(e).forEach(function (k) {\n        if (k !== 'default') {\n          var d = Object.getOwnPropertyDescriptor(e, k);\n          Object.defineProperty(n, k, d.get ? d : {\n            enumerable: true,\n            get: function () {\n              return e[k];\n            }\n          });\n        }\n      });\n    }\n    n['default'] = e;\n    return Object.freeze(n);\n  }\n\n  var abcNotation__default = /*#__PURE__*/_interopDefaultLegacy(abcNotation);\n  var array__namespace = /*#__PURE__*/_interopNamespace(array);\n  var chord__default = /*#__PURE__*/_interopDefaultLegacy(chord);\n  var ChordType__default = /*#__PURE__*/_interopDefaultLegacy(ChordType);\n  var collection__default = /*#__PURE__*/_interopDefaultLegacy(collection);\n  var Core__namespace = /*#__PURE__*/_interopNamespace(Core);\n  var durationValue__default = /*#__PURE__*/_interopDefaultLegacy(durationValue);\n  var interval__default = /*#__PURE__*/_interopDefaultLegacy(interval);\n  var key__default = /*#__PURE__*/_interopDefaultLegacy(key);\n  var midi__default = /*#__PURE__*/_interopDefaultLegacy(midi);\n  var mode__default = /*#__PURE__*/_interopDefaultLegacy(mode);\n  var note__default = /*#__PURE__*/_interopDefaultLegacy(note);\n  var Pcset__default = /*#__PURE__*/_interopDefaultLegacy(Pcset);\n  var progression__default = /*#__PURE__*/_interopDefaultLegacy(progression);\n  var range__default = /*#__PURE__*/_interopDefaultLegacy(range);\n  var romanNumeral__default = /*#__PURE__*/_interopDefaultLegacy(romanNumeral);\n  var scale__default = /*#__PURE__*/_interopDefaultLegacy(scale);\n  var ScaleType__default = /*#__PURE__*/_interopDefaultLegacy(ScaleType);\n  var timeSignature__default = /*#__PURE__*/_interopDefaultLegacy(timeSignature);\n\n  // deprecated (backwards compatibility)\r\n  var Tonal = Core__namespace;\r\n  var PcSet = Pcset__default['default'];\r\n  var ChordDictionary = ChordType__default['default'];\r\n  var ScaleDictionary = ScaleType__default['default'];\n\n  Object.defineProperty(exports, 'AbcNotation', {\n    enumerable: true,\n    get: function () {\n      return abcNotation__default['default'];\n    }\n  });\n  exports.Array = array__namespace;\n  Object.defineProperty(exports, 'Chord', {\n    enumerable: true,\n    get: function () {\n      return chord__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'ChordType', {\n    enumerable: true,\n    get: function () {\n      return ChordType__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Collection', {\n    enumerable: true,\n    get: function () {\n      return collection__default['default'];\n    }\n  });\n  exports.Core = Core__namespace;\n  Object.defineProperty(exports, 'DurationValue', {\n    enumerable: true,\n    get: function () {\n      return durationValue__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Interval', {\n    enumerable: true,\n    get: function () {\n      return interval__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Key', {\n    enumerable: true,\n    get: function () {\n      return key__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Midi', {\n    enumerable: true,\n    get: function () {\n      return midi__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Mode', {\n    enumerable: true,\n    get: function () {\n      return mode__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Note', {\n    enumerable: true,\n    get: function () {\n      return note__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Pcset', {\n    enumerable: true,\n    get: function () {\n      return Pcset__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Progression', {\n    enumerable: true,\n    get: function () {\n      return progression__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Range', {\n    enumerable: true,\n    get: function () {\n      return range__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'RomanNumeral', {\n    enumerable: true,\n    get: function () {\n      return romanNumeral__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'Scale', {\n    enumerable: true,\n    get: function () {\n      return scale__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'ScaleType', {\n    enumerable: true,\n    get: function () {\n      return ScaleType__default['default'];\n    }\n  });\n  Object.defineProperty(exports, 'TimeSignature', {\n    enumerable: true,\n    get: function () {\n      return timeSignature__default['default'];\n    }\n  });\n  exports.ChordDictionary = ChordDictionary;\n  exports.PcSet = PcSet;\n  exports.ScaleDictionary = ScaleDictionary;\n  exports.Tonal = Tonal;\n  Object.keys(Core).forEach(function (k) {\n    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {\n      enumerable: true,\n      get: function () {\n        return Core[k];\n      }\n    });\n  });\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=index.js.map\n"],"names":["fillStr","s","n","Array","Math","abs","join","deprecate","original","alternative","fn","args","console","warn","apply","this","isNamed","src","name","isPitch","pitch","step","alt","FIFTHS","STEPS_TO_OCTS","map","fifths","floor","encode","oct","dir","f","undefined","FIFTHS_TO_STEPS","decode","coord","o","i","unaltered","NoNote","empty","pc","acc","cache$1","Map","stepToLetter","charAt","altToAcc","accToAlt","length","note","cached","get","value","noteName","tokens","tokenizeNote","letter","octStr","charCodeAt","chroma","SEMI","height","m","midi","freq","pow","parse$1","props","pitchName$1","set","REGEX$1","str","exec","toUpperCase","replace","coordToNote","noteCoord","NoInterval","REGEX","RegExp","tokenizeInterval","cache","interval","num","q","t","TYPES","type","simple","test","qToAlt","semitones","SIZES","parse","calcNum","altToQ","pitchName","coordToInterval","forceDescending","transpose","intervalName","note$1","interval$1","intervalCoord","distance","fromNote","toNote","from","to","fcoord","tcoord","character","times","tokenize","abcToScientificNotation","a","scientificToAbcNotation","toLowerCase","index","transpose$1","distance$1","sortedNoteNames","notes","filter","sort","b","arr","permutations","slice","reduce","perm","concat","e","pos","newPerm","splice","ascR","descR","len","rnd","random","range","rotate","compact","shuffle","EmptyPcset","setNum","normalized","intervals","setNumToChroma","Number","toString","chromaToNumber","parseInt","isChroma","isArray","binary","listToChroma","isPcset","normalizedNum","split","_","chromaRotations","push","IVLS","chromaToIntervals","chromaToPcset","pcset","modes","normalize","r","isSubsetOf","isSupersetOf","isNoteIncludedIn","chromas","isEqual","s1","s2","isIncluded","NoChordType","quality","aliases","dictionary","chordType","all","entries","add","fullName","has","indexOf","getQuality","chord","get$1","forEach","alias","addAlias","ivls","names","index$1","x","symbols","Object","keys","NoScaleType","scale","scaleType","removeAll","NoChord","symbol","root","rootDegree","tonic","NaN","NUM_TYPES","getChord","typeName","optionalTonic","optionalRoot","rootInterval","newNum","shift","detect","source","weight","tonicChroma","pcToName","record","namedSet","allModes","found","mode","chordName","baseNote","findExactMatches","chordScales","isChordIncluded","isSuperset","all$1","isSubset","VALUES","denominator","shorthand","dots","fraction","NoDuration","base","find","dur","includes","numerator","calcDots","duration","shorthands","simplify","IN","IQ","combinator","substract","transposeFifths","ivl","nFifths","nOcts","fromSemitones","d","c","invert","addTo","other","coordA","coordB","isMidi","arg","toMidi","L2","log","L440","freqToMidi","v","round","SHARPS","FLATS","midiToNoteName","options","isNaN","Infinity","sharps","pitchClass","midiToFreq","tuning","NAMES","toName","onlyNotes","array","fromMidi","transposeBy","transposeFrom","ascending","sortedNames","comparator","sortedUniqNames","enharmonic","destName","dest","srcChroma","destChroma","destOctOffset","destOct","accidentals","octave","descending","fromMidiSharps","fromFreq","fromFreqSharps","tr","trBy","trFrom","trFifths","NoRomanNumeral","roman","upperRoman","major","romanNumeral","ROMANS","NAMES_MINOR","Empty","freeze","NoKey","alteration","keySignature","NoKeyScale","grades","chords","chordsHarmonicFunction","NoMajorKey","minorRelative","secondaryDominants","secondaryDominantsMinorRelative","substituteDominants","substituteDominantsMinorRelative","NoMinorKey","relativeMajor","natural","harmonic","melodic","mapScaleToType","list","sep","keyScale","harmonicFunctions","gr","distInFifths","MajorScale","NaturalScale","HarmonicScale","MelodicScale","majorKey","romanInTonic","majorTonicFromKeySignature","sig","minorKey","tnc","MODES","NoMode","modeNum","triad","seventh","modeName","triads","tonics","destination","relativeTonic","seventhChords","fromRomanNumerals","rn","toRomanNumerals","numeric","result","last","chromatic","NoScale","substring","st","scaleNotes","names$1","extended","modeNames","reduced","scaleChords","inScale","rangeOf","getName","noteOrMidi","currNote","position","getNoteNameOf","NONE","upper","lower","additive","CACHE","literal","up","low","down","ts","build","exports","abcNotation","ChordType","collection","Core","durationValue","key","Pcset","progression","ScaleType","timeSignature","_interopDefaultLegacy","default","_interopNamespace","__esModule","create","k","getOwnPropertyDescriptor","defineProperty","enumerable","abcNotation__default","array__namespace","chord__default","ChordType__default","collection__default","Core__namespace","durationValue__default","interval__default","key__default","midi__default","mode__default","note__default","Pcset__default","progression__default","range__default","romanNumeral__default","scale__default","ScaleType__default","timeSignature__default","Tonal","PcSet","ChordDictionary","ScaleDictionary","hasOwnProperty","factory","require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","require$$13","require$$14","require$$15","require$$16","require$$17","require$$18"],"mappings":"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"}